# Parameters
V_l = 10  # Potential on the left boundary
V_other = 1  # Potential on other boundaries

L = 1  # Size of the box
N = 70  # Grid points per side
h = L/N  # Step size
M = 100  # Number of random walks per point

# Initialize potential grid
V = np.ones((N + 1, N + 1))*V_other
V[:, 0] = V_l  # Left boundary condition

# Random walk function
np.random.seed()
def RW(x, y):
    while True:
        # If we reach the boundary, return the boundary potential
        if x == 0:
            return V_l
        if x == N or y == 0 or y == N:
            return V_other
        
        # Random direction
        direction = np.random.choice(['left', 'right', 'up', 'down'])
        if direction == 'left':
            x -= 1
        elif direction == 'right':
            x += 1
        elif direction == 'up':
            y += 1
        elif direction == 'down':
            y -= 1

# Computation of the potential with random walk
for i in range(1, N):
    for j in range(1, N):
        pot = [RW(i, j) for _ in range(M)]
        V[i, j] = np.mean(pot)


# Heatmap of the potential
plt.figure(figsize=(6, 5))
plt.imshow(V.T, origin='lower', extent=[0, 1, 0, 1], cmap='gnuplot')
plt.colorbar(label='Electrostatic potential')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Solution to Laplace Equation using Random Walk')
plt.show()
